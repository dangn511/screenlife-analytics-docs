{"remainingRequest":"C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??ref--6!C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\src\\devguide\\README.md?vue&type=template&id=60901d02&","dependencies":[{"path":"C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\src\\devguide\\README.md","mtime":1690748180750},{"path":"C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\edge\\Documents\\vuepress_documentation\\docs\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHsKICB2YXIgX3ZtID0gdGhpcywKICAgIF9jID0gX3ZtLl9zZWxmLl9jOwogIHJldHVybiBfYygnQ29udGVudFNsb3RzRGlzdHJpYnV0b3InLCB7CiAgICBhdHRyczogewogICAgICAic2xvdC1rZXkiOiBfdm0uJHBhcmVudC5zbG90S2V5CiAgICB9CiAgfSwgW19jKCdoMScsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJzY3JlZW5saWZlLWFuYWx5dGljcy1oYW5kb3Zlci1kb2N1bWVudGF0aW9uIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjc2NyZWVubGlmZS1hbmFseXRpY3MtaGFuZG92ZXItZG9jdW1lbnRhdGlvbiIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgU2NyZWVubGlmZSBBbmFseXRpY3MgLSBoYW5kb3ZlciBkb2N1bWVudGF0aW9uIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiVG8gdGhlIG5ldyBwZXJzb24gdGFraW5nIG92ZXIgdGhpcyBwcm9qZWN0LCBnb29kIGx1Y2sgd2l0aCB5b3VyIHdvcmsgYW5kIHNvcnJ5IGZvciB0aGUgbWVzcy4gSSB0b29rIGEgbWVzc3kgb3BlbiBzb3VyY2UgY29kZWJhc2UsIGFuZCBhZGRlZCBtb3JlIG1lc3MgdG8gdGhlIHBpbGUuIFNvIHRoYXQgeW91IHdvbid0IGhhdmUgdG8gd2FzdGUgYSBtb250aCBmaWd1cmluZyBvdXQgd2hhdCB0aGUgaGVsbCBpcyBhbGwgdGhpcyBkb2luZywgbGlrZSBJIGRpZCwgdGhpcyBpcyBhIGNvbXByZWhlbnNpdmUgZ3VpZGUgZm9yIHRoZSBTY3JlZW5saWZlIEFuYWx5dGljcyBwbGF0Zm9ybSwgaW5jbHVkaW5nIGEgY2xlYXIgZXhwbGFuYXRpb24gb2YgdGhlIGNvZGViYXNlLiIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIkkgaG9wZSB0aGlzIGd1aWRlIHdpbGwgYmUgdXNlZnVsIGZvciB5b3UsIGFuZCBvbmNlIHlvdSdyZSBkb25lIHdpdGggdGhlIHByb2plY3QsIGFkZCBvbiB0byB0aGlzIGZvciBhcmNoaXZlLiBUaGUgd29ybGQgbmVlZHMgbW9yZSBjbGVhciBhbmQgdXNhYmxlIGRvY3VtZW50YXRpb25zLiIpXSksIF92bS5fdigiICIpLCBfYygnaDInLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAicXVpY2stZ3VpZGUiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNxdWljay1ndWlkZSIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgUXVpY2sgZ3VpZGUiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJUaGUgcmVwbyBmb3IgdGhlIEFuYWx5dGljcyBhcHAgaXMgZm91bmQgIiksIF9jKCdhJywgewogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiaHR0cHM6Ly9naXRodWIuY29tL1NjcmVlbkxpZmUtQ2FwdHVyZS1UZWFtL3NjcmVlbmxpZmUtYW5hbHl0aWNzL3RyZWUvZGV2IiwKICAgICAgInRhcmdldCI6ICJfYmxhbmsiLAogICAgICAicmVsIjogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICB9CiAgfSwgW192bS5fdigiaGVyZSIpLCBfYygnT3V0Ym91bmRMaW5rJyldLCAxKSwgX3ZtLl92KCIuIE15IGxhc3QgdXBkYXRlIHdhcyBvbiB0aGUgZGV2IGJyYW5jaCwgYnV0IGFzIG9mIG5vdyBpdCBwcm9iYWJseSBjYW4gYmUgbWVyZ2VkIGJhY2sgaW50byBtYWluLiIpXSksIF92bS5fdigiICIpLCBfYygnaDMnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAicnVubmluZy1zdGVwcyIKICAgIH0KICB9LCBbX2MoJ2EnLCB7CiAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiI3J1bm5pbmctc3RlcHMiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIFJ1bm5pbmcgc3RlcHMiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJUaGUgc3RlcHMgZm9yIGluc3RhbGxpbmcgYW5kIHVzaW5nIHRoZSBhcHAgY2FuIGJlIGZvdW5kIGluIHRoZSByZWFkbWUgb24gZGV2IGJyYW5jaCIpXSksIF92bS5fdigiICIpLCBfYygnaDInLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAiY29kZS1icmVha2Rvd24tZGVwbG95bWVudCIKICAgIH0KICB9LCBbX2MoJ2EnLCB7CiAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiI2NvZGUtYnJlYWtkb3duLWRlcGxveW1lbnQiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIENvZGUgYnJlYWtkb3duOiBEZXBsb3ltZW50IildKSwgX3ZtLl92KCIgIiksIF9jKCdoMycsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJjb21wb3NlLWZpbGUiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNjb21wb3NlLWZpbGUiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIENvbXBvc2UgZmlsZSIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIkZvciBidWlsZGluZyBwdXJwb3NlcywgdGh1cyBmYXIgSSd2ZSBvbmx5IHVzZWQgIiksIF9jKCdjb2RlJywgW192bS5fdigiZG9ja2VyLWNvbXBvc2UuZGV2LnltbCIpXSksIF92bS5fdigiLiBZb3Ugd2lsbCBzZWUgaW4gdGhlIGNvbXBvc2UgZmlsZSwgdW5kZXIgIiksIF9jKCdjb2RlJywgW192bS5fdigic2VydmljZXMiKV0pLCBfdm0uX3YoIiwgdGhlcmUgYXJlIDUgaW1hZ2VzIHRvIGJlIGRlcGxveWVkLiBUaGUgY29tcG9zZSBmaWxlIHdpbGwgcmVhZCB0aGUgRG9ja2VyZmlsZXMgYXQgZWFjaCBsb2NhdGlvbiB0byBidWlsZCB0aGUgaW1hZ2VzLiIpXSksIF92bS5fdigiICIpLCBfYygnaDQnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAiZnJvbnQtZW5kIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjZnJvbnQtZW5kIgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiBGcm9udCBlbmQiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX2MoJ2NvZGUnLCBbX3ZtLl92KCJhbm5vdGF0b3JfY2xpZW50IildKSwgX3ZtLl92KCIgaXMgb2YgY291cnNlIHRoZSBjbGllbnQgZmFjaW5nIHNpZGUuIENvZGUgZm9yIGFsbCB0aGUgZnJvbnRlbmQgc3R1ZmYgaXMgaW4gdGhlICIpLCBfYygnY29kZScsIFtfdm0uX3YoImNsaWVudCIpXSksIF92bS5fdigiIGRpcmVjdG9yeS4gVGhlIGNsaWVudCBoYXMgYW5vdGhlciBEb2NrZXJmaWxlIGluc2lkZSB0byBiZSB1c2VkIGZvciBkZXBsb3ltZW50IGF0ICIpLCBfYygnY29kZScsIFtfdm0uX3YoIi4vY2xpZW50L0RvY2tlcmZpbGUiKV0pLCBfdm0uX3YoIi4gV2UnbGwgZ2V0IHRvIHRoYXQgbGF0ZXIgYmVsb3cuIildKSwgX3ZtLl92KCIgIiksIF9jKCdoNCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJiYWNrZW5kIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjYmFja2VuZCIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgQmFja2VuZCIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfYygnY29kZScsIFtfdm0uX3YoImFubm90YXRvcl93ZWJzZXJ2ZXIiKV0pLCBfdm0uX3YoIiBpcyB0aGUgRmxhc2sgYmFja2VuZCBzZXJ2ZXIuIEl0IGFsc28gaGFzIGEgRG9ja2VyZmlsZSB0byBiZSByZWFkIGF0ICIpLCBfYygnY29kZScsIFtfdm0uX3YoIi4vYmFja2VuZC93ZWJzZXJ2ZXIvRG9ja2VyZmlsZSIpXSksIF92bS5fdigiLiIpXSksIF92bS5fdigiICIpLCBfYygnaDQnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAid29ya2VycyIKICAgIH0KICB9LCBbX2MoJ2EnLCB7CiAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiI3dvcmtlcnMiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIFdvcmtlcnMiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX2MoJ2NvZGUnLCBbX3ZtLl92KCJhbm5vdGF0b3Jfd29ya2VycyIpXSksIF92bS5fdigiIGlzIGEgc2VydmVyIHRvIG1hbmFnZSB3b3JrZXJzLCB0byBwZXJmb3JtIGFzeW5jaHJvbm91cyB0YXNrcy4gVGhlc2Ugd29ya2VycyB3aWxsIGJlIGhhbmRsaW5nIGEgbWFqb3JpdHkgb2YgQVBJIGNhbGxzLCBpbnRlcmFjdGluZyB3aXRoIHRoZSBkYXRhYmFzZS4gSXRzIERvY2tlcmZpbGUgaXMgYXQgIiksIF9jKCdjb2RlJywgW192bS5fdigiLi9iYWNrZW5kL3dvcmtlcnMvRG9ja2VyZmlsZSIpXSldKSwgX3ZtLl92KCIgIiksIF9jKCdoNCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJkYXRhYmFzZSIKICAgIH0KICB9LCBbX2MoJ2EnLCB7CiAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiI2RhdGFiYXNlIgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiBEYXRhYmFzZSIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIlRoaXMgaW1hZ2UgdXNlcyB0aGUgc3RvY2sgTW9uZ28gaW1hZ2UgZnJvbSBEb2NrZXIgdG8gYnVpbGQuIEl0IGRvZXMgbm90IGhhdmUgYSBEb2NrZXJmaWxlLiIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIkhvd2V2ZXIsIG5vdGUgdGhhdCAiKSwgX2MoJ3N0cm9uZycsIFtfdm0uX3YoInRoaXMgaW1hZ2UgaXMgbm90IHdoZXJlIGRhdGEgaXMgc3RvcmVkIildKSwgX3ZtLl92KCIuIERhdGEgd2lsbCBiZSBzdG9yZWQgaW4gYSB2b2x1bWUgY2FsbGVkICIpLCBfYygnY29kZScsIFtfdm0uX3YoIm1vbmdvZGJfZGF0YSIpXSksIF92bS5fdigiLiIpXSksIF92bS5fdigiICIpLCBfYygnaDQnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAibWVzc2FnZXEiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNtZXNzYWdlcSIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgTWVzc2FnZXEiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJCdWlsdCB1c2luZyB0aGUgc3RvY2sgUmFiYml0TVEgaW1hZ2UuIFRoaXMgb25lIGlzIG1vc3RseSBzdGFibGUsIGl0IHNob3VsZCBiZSBsZWZ0IGFsb25lIHVubGVzcyB5b3UgbmVlZCB0byB1cGdyYWRlL2Rvd25ncmFkZSBSYWJiaXRNUS4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2gzJywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogImluZGl2aWR1YWwtZG9ja2VyZmlsZXMiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNpbmRpdmlkdWFsLWRvY2tlcmZpbGVzIgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiBJbmRpdmlkdWFsIERvY2tlcmZpbGVzIildKSwgX3ZtLl92KCIgIiksIF9jKCdoNCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJjbGllbnQiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNjbGllbnQiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIENsaWVudCIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIk91ciBjbGllbnQgaW1hZ2UgaXMgYnVpbHQgdXBvbiBOb2RlIDEwLCB1c2luZyBWdWUtY2xpIDMuNC4wLiBUaGUgY2xpZW50IGFjY2VzcyBwb2ludCBmb3IgcHVibGljIGFjY2VzcyBvciBkZXYgYWNjZXNzIGlzIGF0IHBvcnQgODA4MC4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJCdXQgYWxzbywgdGFrZSBhIGxvb2sgYXQgIiksIF9jKCdjb2RlJywgW192bS5fdigidnVlLmNvbmZpZy5qcyIpXSksIF92bS5fdigiLiBJJ3ZlIHNldCAiKSwgX2MoJ2NvZGUnLCBbX3ZtLl92KCJwdWJsaWNQYXRoIildKSwgX3ZtLl92KCIgdG8gc2NyZWVubGlmZS1hbmFseXRpY3MuIFRoYXQgbWVhbnMsIGFjY2VzcyB0byBjbGllbnQgd2lsbCBiZSBhdCAiKSwgX2MoJ2NvZGUnLCBbX3ZtLl92KCI8aXBfYWRkcmVzcz46ODA4MC9zY3JlZW5saWZlLWFuYWx5dGljcyIpXSksIF92bS5fdigiLiBBZnRlciBkZXBsb3lpbmcgbG9jYWxseSwgeW91IHdpbGwgYWNjZXNzIGl0IGF0ICIpLCBfYygnY29kZScsIFtfdm0uX3YoImxvY2FsaG9zdDo4MDgwL3NjcmVlbmxpZmUtYW5hbHl0aWNzLyIpXSldKSwgX3ZtLl92KCIgIiksIF9jKCdoNCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJiYWNrZW5kLTIiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNiYWNrZW5kLTIiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIEJhY2tlbmQiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJUaGlzIGZpbGUgaGFzIHF1aXRlIGEgbG90IHRvIGxvb2sgYXQuIE91ciBzdGFydGluZyBwb2ludCBpcyB0aGUgR1BVIGVuYWJsZWQgVGVuc29yZmxvdyBpbWFnZSAiKSwgX2MoJ2NvZGUnLCBbX3ZtLl92KCJ0ZW5zb3JmbG93L3RlbnNvcmZsb3c6MS4xNS40LWdwdS1weTMiKV0pLCBfdm0uX3YoIi4gQWZ0ZXIgdGhhdCwgaXQncyBhIG1hdHRlciBvZiBpbnN0YWxsaW5nIGEgdG9uIG9mIGRlcGVuZGVuY2llcyBiZWZvcmUgd2UgY2FuIHN0YXJ0LiBJIGhpZ2hseSBzdWdnZXN0IHlvdSBzaG91bGQgc2F2ZSB0aGlzIGltYWdlIGFuZCB1cGxvYWQgdG8gRG9ja2VyaHViIGZvciBmdXR1cmUgdXNlLCBvdGhlcndpc2UgaXQgdGFrZXMgdGltZSB0byByZWJ1aWxkIGV2ZXJ5IHRpbWUgeW91IHN0YXJ0IGZyZXNoLiIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIkJhY2tlbmQgaXMgZXhwb3NlZCBhdCBwb3J0IDgwODEuIEluIHRoZSBpbml0IGZpbGUgZm9yIG91ciBGbGFzayBzZXJ2ZXIgKCIpLCBfYygnY29kZScsIFtfdm0uX3YoImJhY2tlbmQvd2Vic2VydmVyL2FwaSIpXSksIF92bS5fdigiKSwgSSd2ZSBwcmVmaXhlZCB0aGUgVVJMIGZvciBBUEkgZW5kcG9pbnQgdG8gYmUgIiksIF9jKCdjb2RlJywgW192bS5fdigiYXBpLXNjcmVlbmxpZmUiKV0pLCBfdm0uX3YoIi4gQWdhaW4sIGxvb2sgYXQgdGhlICIpLCBfYygnY29kZScsIFtfdm0uX3YoInByb3h5IildKSwgX3ZtLl92KCIgc2VjdGlvbiBpbiAiKSwgX2MoJ2NvZGUnLCBbX3ZtLl92KCJWdWUuY29uZmlnLmpzIildKSwgX3ZtLl92KCIuIEkndmUgc2V0ICIpLCBfYygnY29kZScsIFtfdm0uX3YoIjo4MDgxL2FwaS1zY3JlZW5saWZlIildKSwgX3ZtLl92KCIgdG8gIiksIF9jKCdjb2RlJywgW192bS5fdigiL2FwaS1zY3JlZW5saWZlIildKSwgX3ZtLl92KCIuIFRoYXQgbWVhbnMsICIpLCBfYygnY29kZScsIFtfdm0uX3YoIjo4MDgwL2FwaS1zY3JlZW5saWZlIildKSwgX3ZtLl92KCIgd2lsbCBhbHNvIHBvaW50IGF0IHRoZSBzZXJ2ZXIgYWNjZXNzIHBvaW50LiIpXSksIF92bS5fdigiICIpLCBfYygnaDQnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAid29ya2Vycy0yIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjd29ya2Vycy0yIgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiBXb3JrZXJzIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiVGhlIHdvcmtlcnMgaW1hZ2UgaXMgYWxzbyBidWlsdCB1cG9uICIpLCBfYygnY29kZScsIFtfdm0uX3YoInRlbnNvcmZsb3cvdGVuc29yZmxvdzoxLjE1LjQtZ3B1LXB5MyIpXSksIF92bS5fdigiLiBXb3JrZXJzIGltYWdlIGVuZHBvaW50IGlzIGF0IHBvcnQgNTU1NS4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2gyJywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogImNvZGUtYnJlYWtkb3duLWNsaWVudCIKICAgIH0KICB9LCBbX2MoJ2EnLCB7CiAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiI2NvZGUtYnJlYWtkb3duLWNsaWVudCIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgQ29kZSBicmVha2Rvd246IENsaWVudCIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIk5vdywgd2UncmUgdGFraW5nIGEgZGl2ZSBpbnRvIHRoZSBmdWNrZmVzdCB0aGF0IGlzICIpLCBfYygnY29kZScsIFtfdm0uX3YoIi4vY2xpZW50IildKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2gzJywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogImVudHJ5LXBvaW50IgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjZW50cnktcG9pbnQiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIEVudHJ5IHBvaW50IildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiQXMgdXN1YWwsIG91ciBlbnRyeSBwb2ludCBpcyB0aGUgIiksIF9jKCdjb2RlJywgW192bS5fdigiQXBwLnZ1ZSIpXSksIF92bS5fdigiIGZpbGUuIFlvdSdsbCBub3RpY2UgdGhhdCBpdCBvbmx5IGhhcyB0d28gY29tcG9uZW50czogdGhlIE5hdmJhciwgYW5kIGEgUm91dGVyVmlldy4gRXZlcnkgd2ViIGNvbnRlbnQgd2Ugc2VlIG9uIHRoZSBwYWdlIGlzIHdpdGhpbiB0aGlzIFJvdXRlclZpZXcgY29tcG9uZW50LiIpXSksIF92bS5fdigiICIpLCBfYygnaDMnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAicm91dGVyIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjcm91dGVyIgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiBSb3V0ZXIiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJUaGUgIiksIF9jKCdjb2RlJywgW192bS5fdigicm91dGVyLmpzIildKSwgX3ZtLl92KCIgaXMsIGFzIHVzdWFsLCB3aGVyZSB0aGUgaW5kZXggZm9yIHRoZSBwYWdlcyBhcmUuIFRoZXkgYXJlIGFsbCBsb2NhdGVkIHVuZGVyICIpLCBfYygnY29kZScsIFtfdm0uX3YoIi4vY2xpZW50L3NyYy92aWV3cyIpXSldKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiTm90ZSB0aGUgIiksIF9jKCdjb2RlJywgW192bS5fdigicmVxdWlyZXNBdXRoOiB0cnVlIildKSwgX3ZtLl92KCIgZm9yIG1vc3Qgcm91dGVzLiBUaGlzIGlzIHRvIGVuc3VyZSBubyB1bmF1dGhvcml6ZWQgYWNjZXNzIHRvIGFueSBjb21wb25lbnQgcGFnZSwgdW5sZXNzIHRoZSB1c2VyIGhhcyBhbHJlYWR5IGxvZ2dlZCBpbi4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJUaGUgYXV0aCBhbmQgcmVyb3V0aW5nIHByb2Nlc3MgY2FuIGJlIGZvdW5kIGluICIpLCBfYygnY29kZScsIFtfdm0uX3YoIm1haW4sanMiKV0pLCBfdm0uX3YoIiBpbiB0aGUgIiksIF9jKCdjb2RlJywgW192bS5fdigicm91dGVyLmJlZm9yZUVhY2giKV0pLCBfdm0uX3YoIiBkZWZpbml0aW9uLiIpXSksIF92bS5fdigiICIpLCBfYygnaDMnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAidmlld3MiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiN2aWV3cyIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgVmlld3MiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2g0JywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogImFib3V0IgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjYWJvdXQiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIEFib3V0IildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiVGhpcyBwYWdlIGlzIG1lYW50IHRvIGJlIGFuIEZBUSBmb3IgdGhlIHdlYmFwcCwgYnV0IGZvciBub3cgaXQncyBibGFuay4gWW91IGNhbiBidWlsZCB0aGlzIHVwIGFmdGVyIHlvdSdyZSBkb25lIGZ1bGx5IGRldmVsb3BpbmcgdGhlIGFwcC4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2g0JywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogImFkbWlucGFuZWwiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNhZG1pbnBhbmVsIgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiBBZG1pblBhbmVsIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiSW4gdGhlIE5hdmJhciBjb21wb25lbnQsIHlvdSB3aWxsIHNlZSB0aGF0IHRoaXMgcGFnZSdzIGFjY2VzcyBpcyByZXN0cmljdGVkIG9ubHkgdG8gYWRtaW4uIFRoaXMgaXMgd2hlcmUgdGhlIGFkbWluIGNhbiBtYW5hZ2UgdXNlcnMsIGluY2x1ZGluZyBjcmVhdGluZyBhbmQgZ3JhbnRpbmcgYWNjZXNzLiIpXSksIF92bS5fdigiICIpLCBfYygnaDQnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAiYW5ub3RhdG9yIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjYW5ub3RhdG9yIgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiBBbm5vdGF0b3IiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJUaGUgcGFnZSBmb3IgaW1hZ2Ugc2VnbWVudGF0aW9uLiBBbHNvIHRoZSBtb3N0IGdvZGRhbW4gYW5ub3lpbmcgcGFnZSBvZiBhbGwuIildKSwgX3ZtLl92KCIgIiksIF9jKCdoNCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJhdXRoIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjYXV0aCIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgQXV0aCIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIlRoZSBsb2dpbiBwYWdlLiBPbmx5IHNob3duIHVwb24gZmlyc3QgYWNjZXNzaW5nIHRoZSBwYWdlLiBUaGlzIGlzIHdoZXJlLCBpZiBhdXRoZW50aWNhdGlvbiBndWFyZCB0cmlnZ2VycywgdGhlIHVzZXIgd2lsbCBiZSBzZW50IHRvLiIpXSksIF92bS5fdigiICIpLCBfYygnaDQnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAiY2F0ZWdvcmllcyIKICAgIH0KICB9LCBbX2MoJ2EnLCB7CiAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiI2NhdGVnb3JpZXMiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIENhdGVnb3JpZXMiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJUaGlzIGlzIGEgbGVmdG92ZXIgZnJvbSB0aGUgb3JpZ2luYWwgYXV0aG9ycywgYW5kIGZvciB0aGUgc2FrZSBvZiBhdm9pZGluZyBjb25mdXNpb24sIEkndmUgcHVycG9zZWx5IGhpZGRlbiBpdCBmcm9tIG5vcm1hbCB1c2Vycy4gSXQgZGlzcGxheXMgYWxsIHRoZSBjYXRlZ29yaWVzIHRoYXQgaGFzIGJlZW4gY3JlYXRlZC4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJCZWNhdXNlIG9mIGhvdyB0aGUgZGVsZXRpb24gd29ya3MgaW4gdGhpcyBhcHAsIHJlbW92aW5nIGEgY2F0ZWdvcnkgZG9lc24ndCBhY3R1YWxseSBlcmFzZSBpdCBmcm9tIHRoZSBkYXRhYmFzZS4gSSd2ZSBkZXZlbG9wZWQgdGhlIHdvcmtmbG93IGZvciB1c2VycyB0byBhZGQvcmVtb3ZlIGNhdGVnb3JpZXMgaW4gdGhlIGFubm90YXRpb24gcGFnZXMgaXRzZWxmLiBMb25nIHN0b3J5IHNob3J0LCB0aGlzIHBhZ2UgaXMgc29tZXdoYXQgcmVkdW5kYW50IG5vdy4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2g0JywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogImRhdGFzZXQiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNkYXRhc2V0IgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiBEYXRhc2V0IildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiTm90IHRvIGJlIGNvbmZ1c2VkIHdpdGggRGF0YXNldHMuIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiVGhpcyBpcyB0aGUgbW9zdCBleHRlbnNpdmUgb25lLCB3aGljaCBpcyB0aGUgcGFnZSB0aGF0IHNob3dzIGFmdGVyIHlvdSBjbGljayBvbiBhIGRhdGFzZXQgZnJvbSB0aGUgaG9tZSBwYWdlLiBJbiB0aGlzIHBhZ2UsIG5hdmlnYXRpb24gaXMgZG9uZSB1c2luZyB0aGUgdmFyaWFibGUgIiksIF9jKCdjb2RlJywgW192bS5fdigidGFiIildKSwgX3ZtLl92KCIuIENoYW5naW5nIGl0IHdpbGwgZGlzcGxheSB0aGUgY29ycmVzcG9uZGluZyAiKSwgX2MoJ2NvZGUnLCBbX3ZtLl92KCJkaXYiKV0pLCBfdm0uX3YoIiBpbiB0aGUgSFRNTCBjb2RlLiIpXSksIF92bS5fdigiICIpLCBfYygndWwnLCBbX2MoJ2xpJywgW19jKCdjb2RlJywgW192bS5fdigiYmF0Y2h0YWciKV0pLCBfdm0uX3YoIjogVGhlIGRlZmF1bHQgdGFiLiBUaGlzIGlzIHdoZXJlIGJhdGNoIGFubm90YXRpb24gaXMgcGVyZm9ybWVkLiIpXSksIF92bS5fdigiICIpLCBfYygnbGknLCBbX2MoJ2NvZGUnLCBbX3ZtLl92KCJpbWFnZXMiKV0pLCBfdm0uX3YoIjogVGhpcyBpcyBmb3Igc2VsZWN0aW5nIGluZGl2aWR1YWwgaW1hZ2VzIGZvciBpbWFnZSBzZWdtZW50YXRpb24gdGFzay4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2xpJywgW19jKCdjb2RlJywgW192bS5fdigiZXhwb3J0cyIpXSksIF92bS5fdigiOiBGb3IgdXNlciB0byBkb3dubG9hZCB0aGUgZXhwb3J0ZWQgZGF0YSBvciB0YWdzZXRzLiIpXSksIF92bS5fdigiICIpLCBfYygnbGknLCBbX2MoJ2NvZGUnLCBbX3ZtLl92KCJhbmFseXRpY3MiKV0pLCBfdm0uX3YoIjogVGhlIGRhc2hib2FyZCB3aGVyZSBkYXRhIHZpc3VhbGl6YXRpb24gaXMgc2hvd24uIildKSwgX3ZtLl92KCIgIiksIF9jKCdsaScsIFtfYygnY29kZScsIFtfdm0uX3YoInNlYXJjaGJhciIpXSksIF92bS5fdigiOiBTZWFyY2ggZnVuY3Rpb24uIildKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2g0JywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogImRhdGFzZXRzIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjZGF0YXNldHMiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIERhdGFzZXRzIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiTm90IHRvIGJlIGNvbmZ1c2VkIHdpdGggRGF0YXNldC4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJUaGUgZGUgZmFjdG8gaG9tZXBhZ2Ugb2YgdGhlIHdlYmFwcC4gVGhpcyBpcyB3aGVyZSB1c2VyIHNlZXMgdGhlIGRhdGFzZXRzIHRoYXQncyBiZWVuIGFzc2lnbmVkIHRvIHRoZW0uIENsaWNraW5nIG9uIG9uZSB3aWxsIGdvIHRvICIpLCBfYygnY29kZScsIFtfdm0uX3YoIkRhdGFzZXQudnVlIildKSwgX3ZtLl92KCIuIildKSwgX3ZtLl92KCIgIiksIF9jKCdoNCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJoZWxwIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjaGVscCIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgSGVscCIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIk15IGF0dGVtcHQgYXQgYSBGQVEgcGFnZSwgd2hpY2ggd2Fzbid0IGZpbmlzaGVkLiIpXSksIF92bS5fdigiICIpLCBfYygnaDQnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAiaG9tZSIKICAgIH0KICB9LCBbX2MoJ2EnLCB7CiAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiI2hvbWUiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIEhvbWUiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJSZWR1bmRhbnQgcGFnZS4gUHJldHR5IG11Y2ggY2FuIGlnbm9yZSIpXSksIF92bS5fdigiICIpLCBfYygnaDQnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAicGFnZW5vdGZvdW5kIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjcGFnZW5vdGZvdW5kIgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiBQYWdlTm90Rm91bmQiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJUaGUgNDA0IHBhZ2UiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2g0JywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogInRhc2tzIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjdGFza3MiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIFRhc2tzIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiVGhpcyBvbmUgaXMgYWxzbyBvbmx5IHZpc2libGUgdG8gYWRtaW4uIFRoaXMgaXMgd2hlcmUgdGhlIHdvcmtlcnMgd2lsbCByZXBvcnQgdGhlaXIgdGFzayBwcm9ncmVzcyB3aGVuIHN1bW1vbmVkLiIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIkl0J3Mgbm8gbG9uZ2VyIHVzZWZ1bCBmb3IgYXZlcmFnZSB1c2VycywgYnV0IGEgZ3JlYXQgd2F5IHRvIGhlbHAgeW91IGRlYnVnIGlzc3VlcyB3aXRoIHdvcmtlcnMuIildKSwgX3ZtLl92KCIgIiksIF9jKCdoNCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJ1bmRvIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjdW5kbyIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgVW5kbyIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIkEgbGVnYWN5IGZyb20gdGhlIG9yaWdpbmFsIGF1dGhvcnMuIFRoaXMgaXMgc3VwcG9zZWQgdG8gYmUgd2hlcmUgeW91IGNhbiByZW1vdmUgZGF0YSBmcm9tIHRoZSBkYXRhYmFzZSBlbnRpcmVseS4gSSBhZG1pdCBJIGhhdmVuJ3QgcmVhbGx5IGxvb2tlZCBpbnRvIGl0OyBidXQgeW91IGNhbiBpZiBpdCBoZWxwcyBpbiBmdXR1cmUgZGV2ZWxvcG1lbnQuIildKSwgX3ZtLl92KCIgIiksIF9jKCdoNCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJ1c2VyIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjdXNlciIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgVXNlciIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIkZvciB1c2VycyB0byB1cGRhdGUgdGhlaXIgcHJvZmlsZSBhbmQgcGFzc3dvcmQuIildKSwgX3ZtLl92KCIgIiksIF9jKCdoMicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJjb2RlLWJyZWFrZG93bi1ob3ctYW4tYXBpLWNhbGwtaXMtaGFuZGxlZC1mcm9tLWNsaWVudC10by1iYWNrZW5kIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjY29kZS1icmVha2Rvd24taG93LWFuLWFwaS1jYWxsLWlzLWhhbmRsZWQtZnJvbS1jbGllbnQtdG8tYmFja2VuZCIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgQ29kZSBicmVha2Rvd246IEhvdyBhbiBBUEkgY2FsbCBpcyBoYW5kbGVkLCBmcm9tIGNsaWVudCB0byBiYWNrZW5kIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiV2hlbiBhIHVzZXIgZG9lcyBhbnkgYWN0aW9uIG9uIHRoZSBjbGllbnQsIGhlcmUgaXMgdGhlIGxvbmcgd2luZGVkIGFzcyBwcm9jZXNzIG9mIGhvdyBtZXRob2RzIGFyZSBjYWxsZWQiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2gzJywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogInByZWRlZmluZWQtYXhpb3MtcmVxdWVzdHMiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNwcmVkZWZpbmVkLWF4aW9zLXJlcXVlc3RzIgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiBQcmVkZWZpbmVkIEF4aW9zIHJlcXVlc3RzIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiQXhpb3MgaXMgdGhlcmUgdG8gaGVscCB5b3Ugd2l0aCBjb25zdHJ1Y3RpbmcgSFRUUCByZXF1ZXN0cy4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJQcmVkZWZpbmVkIEhUVFAgcmVxdWVzdHMgY2FuIGJlIGZvdW5kIGluICIpLCBfYygnY29kZScsIFtfdm0uX3YoIi4vY2xpZW50L3NyYy9tb2RlbHMiKV0pLCBfdm0uX3YoIi4gIEVhY2ggb2YgdGhlbSBpcyBkZWRpY2F0ZWQgZm9yIGFuIEFQSSwgd2hpY2ggY2FuIGJlIGZvdW5kIGF0ICIpLCBfYygnY29kZScsIFtfdm0uX3YoIi4vYmFja2VuZC93ZWJzZXJ2ZXIvYXBpIildKSwgX3ZtLl92KCIuIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiWW91IGNhbiBvZiBjb3Vyc2UgdXNlIEF4aW9zIG9uIGl0cyBvd24gdG8gc2VuZCBjdXN0b20gSFRUUCByZXF1ZXN0cyB3aXRoaW4gdGhlIFZ1ZSBwYWdlcy9jb21wb25lbnRzLiIpXSksIF92bS5fdigiICIpLCBfYygnaDMnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAidGhlLXByb2Nlc3MiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiN0aGUtcHJvY2VzcyIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgVGhlIHByb2Nlc3MiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2g0JywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogInNlbmRpbmctdGhlLXJlcXVlc3QiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNzZW5kaW5nLXRoZS1yZXF1ZXN0IgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiBTZW5kaW5nIHRoZSByZXF1ZXN0IildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiSFRUUCByZXF1ZXN0IGlzIHNlbnQgZnJvbSBjbGllbnQgdG8gd2Vic2VydmVyIHdoZW4geW91IGVpdGhlciB1c2UgQXhpb3MgcmF3IHRvIGJ1aWxkIGEgcmVxdWVzdCBhbmQgc2VuZCwgb3IgdHJpZ2dlciBhIGZ1bmN0aW9uIGNhbGwgaW4gb25lIG9mIHRoZSAiKSwgX2MoJ2NvZGUnLCBbX3ZtLl92KCJtb2RlbHMiKV0pLCBfdm0uX3YoIiBmaWxlcyBsaXN0ZWQgYWJvdmUuIildKSwgX3ZtLl92KCIgIiksIF9jKCdoNCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJyZWNlaXZpbmctdGhlLXJlcXVlc3QiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNyZWNlaXZpbmctdGhlLXJlcXVlc3QiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIFJlY2VpdmluZyB0aGUgcmVxdWVzdCIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIlJlY2VpdmluZyByZXF1ZXN0IGlzIGhhbmRsZWQgYnkgdGhlIEFQSXMgaW4gRmxhc2sgKGZvdW5kIGF0ICIpLCBfYygnY29kZScsIFtfdm0uX3YoIi4vYmFja2VuZC93ZWJzZXJ2ZXIvYXBpIildKSwgX3ZtLl92KCIpLiIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIlNvbWUgc2ltcGxlIG9uZXMgd2lsbCBnZXQgYSByZXR1cm4gaW1tZWRpYXRlbHkgaW4gdGhlIEFQSSBjb2RlLiBPdGhlciByZXF1ZXN0cywgcGFydGljdWxhcmx5IHJlcXVlc3RzIHJlZ2FyZGluZyByZWFkaW5nL21vZGlmeWluZyBkYXRhYmFzZSBtaWdodCBuZWVkIHRvIHRyaWdnZXIgbW9yZSBsYXllcnMgb2YgZnVuY3Rpb24gY2FsbHMuIildKSwgX3ZtLl92KCIgIiksIF9jKCdoNCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJkYXRhYmFzZS1jb2RlIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjZGF0YWJhc2UtY29kZSIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgRGF0YWJhc2UgY29kZSIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIlRoZXNlIGNvZGUgYXJlIGZvdW5kIGluICIpLCBfYygnY29kZScsIFtfdm0uX3YoIi4vYmFja2VuZC9kYXRhYmFzZSIpXSksIF92bS5fdigiLiBUaGV5IGFyZSBjbGFzcyBvYmplY3RzIHRoYXQgaW5oZXJpdCBNb25nb0VuZ2luZSdzICIpLCBfYygnY29kZScsIFtfdm0uX3YoIkR5bmFtaWNEb2N1bWVudCIpXSksIF92bS5fdigiIGNsYXNzLiBSZWFkICIpLCBfYygnYScsIHsKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogImh0dHBzOi8vZG9jcy5tb25nb2VuZ2luZS5vcmcvZ3VpZGUvZGVmaW5pbmctZG9jdW1lbnRzLmh0bWwiLAogICAgICAidGFyZ2V0IjogIl9ibGFuayIsCiAgICAgICJyZWwiOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgIH0KICB9LCBbX3ZtLl92KCJoZXJlIiksIF9jKCdPdXRib3VuZExpbmsnKV0sIDEpLCBfdm0uX3YoIiB0byB1bmRlcnN0YW5kIG1vcmUgYWJvdXQgTW9uZ29FbmdpbmUncyBjbGFzc2VzIGlmIHlvdSdyZSBub3QgeWV0IGZhbWlsaWFyLiIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIkVzc2VudGlhbGx5IHRoZXNlIGNsYXNzZXMgcmVwcmVzZW50IGRhdGEgdGFibGVzIGluIE1vbmdvREIsIHdoZXJlIHRoZSBjbGFzcyBhdHRyaWJ1dGVzIGFyZSBmaWVsZHMgaW4gdGhlIGRhdGFiYXNlLiBNb2RpZmljYXRpb24gb2YgdGhlIERCIGlzIGNhcnJpZWQgb3V0IHRocm91Z2ggY2xhc3MgbWV0aG9kcy4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJUYXNrcyB0aGF0IHRha2UgbG9uZyB0byBwZXJmb3JtIHdpbGwgYmUgaGFuZGVkIG92ZXIgdG8gd29ya2VycywgdG8gcGVyZm9ybSBhc3luY2hyb25vdXNseSBpbiB0aGUgYmFja2dyb3VuZC4iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2g0JywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogIndvcmtlcnMtYW5kLXRhc2tzIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjd29ya2Vycy1hbmQtdGFza3MiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIFdvcmtlcnMgYW5kIHRhc2tzIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiV2UncmUgdXNpbmcgQ2VsZXJ5IGFzIHRoZSB3b3JrZXIgbWFuYWdlciwgd2l0aCBSYWJiaXRNUSBiZWluZyB0aGUgdGFzayBicm9rZXIuIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiV29ya2VycyBjYW4gYWxzbyBjYWxsIGRhdGFiYXNlIGNvZGUgKER5bmFtaWNEb2N1bWVudCBjbGFzcyBvYmplY3RzKSB0byBwZXJmb3JtIGRhdGFiYXNlIG9wZXJhdGlvbnMuIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiSXQgaXMgaW1wb3J0YW50IHRvIHJlbWVtYmVyIHRoYXQgd29ya2VycyBhcmUgbWVhbnQgdG8gYmUgd29ya2luZyBpbiB0aGUgYmFja2dyb3VuZC4gVGhlcmVmb3JlLCBBUEkgY2FsbHMgdGhhdCBzcGF3biB3b3JrZXJzIHNob3VsZCBub3QgYXdhaXQgdGhlIHdvcmtlcidzIHJlc3VsdC4gSW4gdGhvc2UgY2FzZSwgZW5zdXJlIHRoYXQ6IildKSwgX3ZtLl92KCIgIiksIF9jKCd1bCcsIFtfYygnbGknLCBbX3ZtLl92KCJ0aGUgZGF0YWJhc2UgY2xhc3MgbWV0aG9kcyB0aGF0IHNwYXduIHdvcmtlcnMgc2hvdWxkIHJldHVybiB0aGUgdGFzaydzIG1ldGFkYXRhICh0YXNrIElELCB0YXNrIG5hbWUgZXRjKSIpXSksIF92bS5fdigiICIpLCBfYygnbGknLCBbX3ZtLl92KCJ0aGUgYmFja2VuZCBBUEkgc2hvdWxkIGV4cGVjdCBhIHJldHVybiBvZiB0aGF0IHRvbyIpXSksIF92bS5fdigiICIpLCBfYygnbGknLCBbX3ZtLl92KCJBUEkgc2hvdWxkIHJlc3BvbmQgdG8gY2xpZW50IHNpbWlsYXJseSB3aXRoIHRhc2sgbWV0YWRhdGEsIG9yIGEgc2ltcGxlIGFja25vd2xlZGdlbWVudC4iKV0pXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIlRvIHNlZSBhIGdvb2QgZXhhbXBsZSBvZiBob3cgdGhpcyBwcm9jZXNzIGdvZXMsIHRha2UgYSBsb29rIGF0ICIpLCBfYygnY29kZScsIFtfdm0uX3YoIi4vYmFja2VuZC93ZWJzZXJ2ZXIvYXBpL2RhdGFzZXRzLnB5IildKSwgX3ZtLl92KCIsIGluIHRoZSAiKSwgX2MoJ2NvZGUnLCBbX3ZtLl92KCJEYXRhc2V0RXhwb3J0IildKSwgX3ZtLl92KCIgY2xhc3MgKHJvdXRlICIpLCBfYygnY29kZScsIFtfdm0uX3YoIi88aW50OmRhdGFzZXRfaWQ+L2V4cG9ydCIpXSksIF92bS5fdigiKSIpXSksIF92bS5fdigiICIpLCBfYygnaDMnLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAiZGVidWdnaW5nLWRhdGFiYXNlLW9wZXJhdGlvbnMtYXBpLWJhY2tlbmQiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiNkZWJ1Z2dpbmctZGF0YWJhc2Utb3BlcmF0aW9ucy1hcGktYmFja2VuZCIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgRGVidWdnaW5nIGRhdGFiYXNlIG9wZXJhdGlvbnMvQVBJIGJhY2tlbmQiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJOb3RlIHRoYXQgaW4gYSBEb2NrZXIgZW52aXJvbm1lbnQsICIpLCBfYygnY29kZScsIFtfdm0uX3YoInByaW50IildKSwgX3ZtLl92KCIgc3RhdGVtZW50cyBpbiBGbGFzayBhbmQgTW9uZ29FbmdpbmUgY29kZSB3b24ndCBkaXNwbGF5IHRvIENMSS4gRm9yIHRoYXQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgR3VuaWNvcm4gIiksIF9jKCdjb2RlJywgW192bS5fdigibG9nZ2VyIildKSwgX3ZtLl92KCIsIGFzIGRlZmluZWQgZm9yIGV4YW1wbGUgaW4gIiksIF9jKCdjb2RlJywgW192bS5fdigiLi9iYWNrZW5kL3dlYnNlcnZlci9fX2luaXRfXy5weSIpXSksIF92bS5fdigiIG9yICIpLCBfYygnY29kZScsIFtfdm0uX3YoIi4vYmFja2VuZC9kYXRhYmFzZS9fX2luaXRfXy5weSIpXSksIF92bS5fdigiLiIpXSldKTsKfTsKdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdOwpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9Ow=="},null]}